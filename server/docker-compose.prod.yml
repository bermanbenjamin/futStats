version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: futstats-db
    environment:
      POSTGRES_DB: futstats
      POSTGRES_USER: futstats
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U futstats -d futstats"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - futstats-network

  # Go API Backend
  api:
    image: ${DOCKER_REGISTRY}/futstats-api:${DOCKER_TAG:-latest}
    container_name: futstats-api
    environment:
      DATABASE_URL: postgres://futstats:${POSTGRES_PASSWORD}@postgres:5432/futstats?sslmode=disable
      PORT: 8080
      SECRET_KEY: ${SECRET_KEY}
      ENVIRONMENT: production
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - futstats-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8080/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: futstats-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - futstats-network

volumes:
  postgres_data:

networks:
  futstats-network:
    driver: bridge
